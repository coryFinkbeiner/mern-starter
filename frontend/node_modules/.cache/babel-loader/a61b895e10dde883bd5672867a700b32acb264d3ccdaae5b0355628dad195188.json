{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// Register user\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\n// export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n//   try {\n//     return await authService.login(user)\n//   } catch (error) {\n//     const message =\n//       (error.response && error.response.data && error.response.data.message) ||\n//       error.message ||\n//       error.toString()\n//     return thunkAPI.rejectWithValue(message)\n//   }\n// })\n\n// export const logout = createAsyncThunk('auth/logout', async () => {\n//   await authService.logout()\n// })\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n    // .addCase(login.pending, (state) => {\n    //   state.isLoading = true\n    // })\n    // .addCase(login.fulfilled, (state, action) => {\n    //   state.isLoading = false\n    //   state.isSuccess = true\n    //   state.user = action.payload\n    // })\n    // .addCase(login.rejected, (state, action) => {\n    //   state.isLoading = false\n    //   state.isError = true\n    //   state.message = action.payload\n    //   state.user = null\n    // })\n    // .addCase(logout.fulfilled, (state) => {\n    //   state.user = null\n    // })\n  }\n});\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/coryfinkbeiner/keepers/mern-starter/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport authService from './authService'\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'))\n\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: '',\n}\n\n// Register user\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (user, thunkAPI) => {\n    try {\n      return await authService.register(user)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Login user\n// export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n//   try {\n//     return await authService.login(user)\n//   } catch (error) {\n//     const message =\n//       (error.response && error.response.data && error.response.data.message) ||\n//       error.message ||\n//       error.toString()\n//     return thunkAPI.rejectWithValue(message)\n//   }\n// })\n\n// export const logout = createAsyncThunk('auth/logout', async () => {\n//   await authService.logout()\n// })\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false\n      state.isSuccess = false\n      state.isError = false\n      state.message = ''\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(register.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.user = action.payload\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n        state.user = null\n      })\n      // .addCase(login.pending, (state) => {\n      //   state.isLoading = true\n      // })\n      // .addCase(login.fulfilled, (state, action) => {\n      //   state.isLoading = false\n      //   state.isSuccess = true\n      //   state.user = action.payload\n      // })\n      // .addCase(login.rejected, (state, action) => {\n      //   state.isLoading = false\n      //   state.isError = true\n      //   state.message = action.payload\n      //   state.user = null\n      // })\n      // .addCase(logout.fulfilled, (state) => {\n      //   state.user = null\n      // })\n  },\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErD,MAAMC,YAAY,GAAG;EACnBL,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxBM,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGZ,gBAAgB,CACtC,eAAe,EACf,OAAOE,IAAI,EAAEW,QAAQ,KAAK;EACxB,IAAI;IACF,OAAO,MAAMZ,WAAW,CAACW,QAAQ,CAACV,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAMH,OAAO,GACVG,KAAK,CAACC,QAAQ,IACbD,KAAK,CAACC,QAAQ,CAACC,IAAI,IACnBF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACL,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOJ,QAAQ,CAACK,eAAe,CAACP,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMQ,SAAS,GAAGpB,WAAW,CAAC;EACnCqB,IAAI,EAAE,MAAM;EACZb,YAAY;EACZc,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACd,SAAS,GAAG,KAAK;MACvBc,KAAK,CAACf,OAAO,GAAG,KAAK;MACrBe,KAAK,CAACZ,OAAO,GAAG,EAAE;IACpB;EACF,CAAC;EACDa,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,QAAQ,CAACe,OAAO,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAACb,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDgB,OAAO,CAACd,QAAQ,CAACgB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACd,SAAS,GAAG,IAAI;MACtBc,KAAK,CAACrB,IAAI,GAAG2B,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAACd,QAAQ,CAACmB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC7CN,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACf,OAAO,GAAG,IAAI;MACpBe,KAAK,CAACZ,OAAO,GAAGkB,MAAM,CAACC,OAAO;MAC9BP,KAAK,CAACrB,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;AACF,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEoB;AAAM,CAAC,GAAGH,SAAS,CAACa,OAAO;AAC1C,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}