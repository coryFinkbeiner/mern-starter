{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import authService from './authService'\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// Register user\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\n// export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n//   try {\n//     return await authService.login(user)\n//   } catch (error) {\n//     const message =\n//       (error.response && error.response.data && error.response.data.message) ||\n//       error.message ||\n//       error.toString()\n//     return thunkAPI.rejectWithValue(message)\n//   }\n// })\n\n// export const logout = createAsyncThunk('auth/logout', async () => {\n//   await authService.logout()\n// })\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  }\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(register.pending, (state) => {\n  //       state.isLoading = true\n  //     })\n  //     .addCase(register.fulfilled, (state, action) => {\n  //       state.isLoading = false\n  //       state.isSuccess = true\n  //       state.user = action.payload\n  //     })\n  //     .addCase(register.rejected, (state, action) => {\n  //       state.isLoading = false\n  //       state.isError = true\n  //       state.message = action.payload\n  //       state.user = null\n  //     })\n  //     .addCase(login.pending, (state) => {\n  //       state.isLoading = true\n  //     })\n  //     .addCase(login.fulfilled, (state, action) => {\n  //       state.isLoading = false\n  //       state.isSuccess = true\n  //       state.user = action.payload\n  //     })\n  //     .addCase(login.rejected, (state, action) => {\n  //       state.isLoading = false\n  //       state.isError = true\n  //       state.message = action.payload\n  //       state.user = null\n  //     })\n  //     .addCase(logout.fulfilled, (state) => {\n  //       state.user = null\n  //     })\n  // },\n});\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","authService","error","response","data","toString","rejectWithValue","authSlice","name","reducers","reset","state","actions","reducer"],"sources":["/Users/coryfinkbeiner/keepers/mern-starter/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n// import authService from './authService'\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'))\n\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: '',\n}\n\n// Register user\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (user, thunkAPI) => {\n    try {\n      return await authService.register(user)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Login user\n// export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n//   try {\n//     return await authService.login(user)\n//   } catch (error) {\n//     const message =\n//       (error.response && error.response.data && error.response.data.message) ||\n//       error.message ||\n//       error.toString()\n//     return thunkAPI.rejectWithValue(message)\n//   }\n// })\n\n// export const logout = createAsyncThunk('auth/logout', async () => {\n//   await authService.logout()\n// })\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false\n      state.isSuccess = false\n      state.isError = false\n      state.message = ''\n    },\n  },\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(register.pending, (state) => {\n  //       state.isLoading = true\n  //     })\n  //     .addCase(register.fulfilled, (state, action) => {\n  //       state.isLoading = false\n  //       state.isSuccess = true\n  //       state.user = action.payload\n  //     })\n  //     .addCase(register.rejected, (state, action) => {\n  //       state.isLoading = false\n  //       state.isError = true\n  //       state.message = action.payload\n  //       state.user = null\n  //     })\n  //     .addCase(login.pending, (state) => {\n  //       state.isLoading = true\n  //     })\n  //     .addCase(login.fulfilled, (state, action) => {\n  //       state.isLoading = false\n  //       state.isSuccess = true\n  //       state.user = action.payload\n  //     })\n  //     .addCase(login.rejected, (state, action) => {\n  //       state.isLoading = false\n  //       state.isError = true\n  //       state.message = action.payload\n  //       state.user = null\n  //     })\n  //     .addCase(logout.fulfilled, (state) => {\n  //       state.user = null\n  //     })\n  // },\n})\n\nexport const { reset } = authSlice.actions\nexport default authSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErD,MAAMC,YAAY,GAAG;EACnBL,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxBM,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGX,gBAAgB,CACtC,eAAe,EACf,OAAOC,IAAI,EAAEW,QAAQ,KAAK;EACxB,IAAI;IACF,OAAO,MAAMC,WAAW,CAACF,QAAQ,CAACV,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOa,KAAK,EAAE;IACd,MAAMJ,OAAO,GACVI,KAAK,CAACC,QAAQ,IACbD,KAAK,CAACC,QAAQ,CAACC,IAAI,IACnBF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACN,OAAO,IAC7BI,KAAK,CAACJ,OAAO,IACbI,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOL,QAAQ,CAACM,eAAe,CAACR,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMS,SAAS,GAAGpB,WAAW,CAAC;EACnCqB,IAAI,EAAE,MAAM;EACZd,YAAY;EACZe,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACd,SAAS,GAAG,KAAK;MACvBc,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACb,OAAO,GAAG,EAAE;IACpB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEY;AAAM,CAAC,GAAGH,SAAS,CAACK,OAAO;AAC1C,eAAeL,SAAS,CAACM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}